#include <iostream>
#include <queue>
#include <map>
#include <climits> // for CHAR_BIT
#include <iterator>
#include <algorithm>
#include <fstream>
#include <string>
#include <iomanip>
#include <string>
#include <sstream>

using namespace std;

const int UniqueSymbols = 1 << CHAR_BIT;
typedef vector<bool> HuffCode;
typedef map<char, HuffCode> HuffCodeMap;

class INode
{
public:
	const int f;

	virtual ~INode() {}

protected:
	INode(int f) : f(f) {}
};

class InternalNode : public INode
{
public:
	INode *const left;
	INode *const right;

	InternalNode(INode* c0, INode* c1) : INode(c0->f + c1->f), left(c0), right(c1) {}
	~InternalNode()
	{
		delete left;
		delete right;
	}
};

class LeafNode : public INode
{
public:
	const char c;

	LeafNode(int f, char c) : INode(f), c(c) {}
};

struct NodeCmp
{
	bool operator()(const INode* lhs, const INode* rhs) const { return lhs->f > rhs->f; }
};

INode* BuildTree(const int(&frequencies)[UniqueSymbols])
{
	priority_queue<INode*, vector<INode*>, NodeCmp> trees;

	for (int i = 0; i < UniqueSymbols; ++i)
	{
		if (frequencies[i] != 0)
			trees.push(new LeafNode(frequencies[i], (char)i));
	}
	while (trees.size() > 1)
	{
		INode* childR = trees.top();
		trees.pop();

		INode* childL = trees.top();
		trees.pop();

		INode* parent = new InternalNode(childR, childL);
		trees.push(parent);
	}
	return trees.top();
}

void GenerateCodes(const INode* node, const HuffCode& prefix, HuffCodeMap& outCodes)
{
	if (const LeafNode* lf = dynamic_cast<const LeafNode*>(node))
	{
		outCodes[lf->c] = prefix;
	}
	else if (const InternalNode* in = dynamic_cast<const InternalNode*>(node))
	{
		HuffCode leftPrefix = prefix;
		leftPrefix.push_back(false);
		GenerateCodes(in->left, leftPrefix, outCodes);

		HuffCode rightPrefix = prefix;
		rightPrefix.push_back(true);
		GenerateCodes(in->right, rightPrefix, outCodes);
	}
}

string read(ifstream &inf){
	string temp;
	string temp2 = "";

	while (!inf.eof()){
		getline(inf, temp);
		temp2 += temp + "\n";
	}
	return temp2;
}

void outputencodingfile(ofstream & outf, string inputfile, int stringlength, string SampleString, HuffCodeMap codes)
{

	outf << "asdlkjfsadoutput\n" + inputfile+"\n";
	for (HuffCodeMap::const_iterator it = codes.begin(); it != codes.end(); ++it)
	{
		outf << it->first;
		copy(it->second.begin(), it->second.end(),
			ostream_iterator<bool>(outf));
		outf << endl;
	}
	outf << "|"<<endl;
	string encoded;
	for (int i = 0; i < stringlength; i++)
	{
		for (HuffCodeMap::const_iterator it = codes.begin(); it != codes.end(); ++it)
		{
			if (SampleString[i] == it->first)
			{
				stringstream buffer;
				copy(it->second.begin(), it->second.end(),
					ostream_iterator<bool>(buffer));
				encoded += buffer.str();

			}
		}
	}
//	outf << encoded;
	int counter = 0;
	string bitss = "";
	for (int k = 0; k < encoded.length(); k++)
	{
		bitss += encoded[k];

		if (counter==8)
		{
			int temp=stoi(bitss, nullptr, 2);
			char hello = static_cast<char>(temp);
		
			int temps2 = 0;
		
			outf <<hello;
			bitss = "";
			counter = 0;
		}
		counter++;
		//outf << counter;
	}
}

void binaryss(int number, string &binary) {
	int remainder;

	if (number <= 1) {
		binary += number;
		return;
	}

	remainder = number % 2;
	binaryss(number >> 1, binary);
	binary+= remainder;
}
int main()
{
	// Build frequency table
	int frequencies[UniqueSymbols] = { 0 };
	ifstream inf;
	string inputfile;
	//Getting userinput
	//-------------------------------------
	char check;
	cout << "Do you want to compress?\n";
	cin >> check;
	if (check =='Y')
	{
		//reading in file and Compressing it.(Has map)
		cout << "Type in the file location\n";
		cin >> inputfile;
		inf.open(inputfile);
		cout << endl << "Type in the file output location" << endl;
		string outputfile;
		cin >> outputfile;
		ofstream outf;
		outputfile += "compression.crazy";
		outf.open(outputfile);
		//-------------------------------------

		string temper = read(inf);
		const char* SampleString = &temper[0u];
		const char* ptr = SampleString;
		while (*ptr != '\0')
			++frequencies[*ptr++];
		inf.close();
		INode* root = BuildTree(frequencies);

		HuffCodeMap codes;
		GenerateCodes(root, HuffCode(), codes);
		delete root;

		int stringlength = 0;
		stringlength = temper.length();
		outputencodingfile(outf, inputfile, stringlength, SampleString, codes);
		outf.close();
	}
	else
	{
		cout << "Please type in the file location to decompress:\n";
		cin >> inputfile;
		inf.open(inputfile+"compression.crazy");
		ofstream outf;
		outf.open(inputfile + "decompression.crazy");
		string decompress="";
		string security="";
		inf >> security;
		if (security != "asdlkjfsadoutput")
		{
			cout << "NOPE we are not decompressing this for you. GO away!";
			system("Pause");
			return 0;
		}
		else
		{
			vector<string> decode;
			string encoded;
			string encodedmat = "";
			int pointer = 0;
			string input = read(inf);

			string filelocation = "";
			//finding the file location
			for (int i = 0; i < input.length(); i++)
			{
				filelocation += input[i];
				if (pointer != 0 && input[i] == '\n')
					break;
				pointer++;
			}
			pointer += 1;
			int pointersbeginning = pointer;
			string lines = "";
			//going through the decode map

			for (int j = pointersbeginning; j < input.length(); j++)
			{
				if (pointer != pointersbeginning && input[j + 1] != '\n' && input[j] != '|')
				{
					if (input[j+1] == ' ')
						lines += "Space";
					lines += input[j+1];
				}
				else if (pointer == pointersbeginning&& input[j + 1] != '|'&& input[j] == '\n')
				{
					lines += "NewLinechar";
				}
				else if (pointer != pointersbeginning && input[j + 1] == '\n' && input[j] != '|')
				{

					decode.push_back(lines);
					//cout << lines<<endl;
					lines = "";
				}
				else if (input[j] == '|')
				{
					pointer+=2;
					break;
				}
				pointer++;
			}

			//-------------------------------------
			pointersbeginning = pointer;

			//creating the string to contain the characters that were converted.
			for (int i = pointersbeginning; i < input.length(); i++)
			{
				encodedmat += input[i];
			}
			//-------------------------------------
			const int amountofchars = encodedmat.length();
			int decimal = 0;
			bool stop=true;
			string binary = "";
			string binarystring = "";
			for (int i = 0; i < amountofchars; i++)
			{
				for (char bingo = 0; bingo < 256; bingo++)
				{
					if (bingo == encodedmat[i])
					{
						//creates binary version of the codes. Then creates them into 8 bit characters so that converts correctly.

						binaryss(decimal, binary);

						for (int k = 0; k < binary.length(); k++)
						{
							if (binary[k] == 0)
								binarystring+= "0";
							else if (binary[k] == 1)
								binarystring+= "1";
						}
						int missingcode = binarystring.length();
						string fix = "";
						if (missingcode < 8)
						{
							missingcode = 8 - missingcode;
							for (int i = 0; i < missingcode; i++)
								fix += "0";
						}
						fix += binarystring;
						binarystring = fix;
						fix = "";
						encoded += binarystring;
						binarystring = "";
						binary = "";
						decimal = 0;
						break;
					}
					decimal++;
				}
			}
			string fixeruper = "1";
			fixeruper += encoded;
			encoded = fixeruper;

			string tempstring = "";
			string tempstring2 = "";
			int j = 0;
			int k = 0;
			for (int i = 0; i < encoded.length(); i++)
			{
				tempstring2 += encoded[i];
				//cout << tempstring2;
				for (k; k < decode.size(); k++)
				{
					if (k!=0 || k!=1)
						for (j = 1; j < decode[k].size(); j++)
						{
							tempstring += decode[k][j];
						}

					if (k == 0)
						for (j = 12; j < decode[k].size(); j++)
						{
							tempstring += decode[k][j];
							decode[k][0] = '\n';
						}
					if (k == 1)
						for (j = 6; j < decode[k].size(); j++)
						{
							tempstring += decode[k][j];
							decode[k][0] = ' ';
						}
					if (tempstring2 == tempstring)
					{
						//cout << decode[k][0];
						outf << decode[1][0] << endl;
						tempstring2 = "";
					}
					tempstring = "";
				}


				k = 0;

			}
			outf << encoded;
		}
		inf.close();
	}

	system("Pause");
	return 0;
}